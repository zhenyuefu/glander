name: Xcode - Build and Analyze

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: Build and analyse default scheme using xcodebuild command
    runs-on: macos-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Determine Xcode container (workspace or project)
        id: xcode_container
        run: |
          if ls -A | grep -qiE '\.xcworkspace$'; then
            echo "filetype_parameter=workspace" >> $GITHUB_OUTPUT
            FILE_TO_BUILD=$(ls -A | grep -iE '\.xcworkspace$' | head -n 1)
            echo "file_to_build=$FILE_TO_BUILD" >> $GITHUB_OUTPUT
          else
            echo "filetype_parameter=project" >> $GITHUB_OUTPUT
            FILE_TO_BUILD=$(ls -A | grep -iE '\.xcodeproj$' | head -n 1)
            echo "file_to_build=$FILE_TO_BUILD" >> $GITHUB_OUTPUT
          fi
      - name: Build (Release)
        env:
          scheme: ${{ 'default' }}
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          xcodebuild clean build \
            -configuration Release \
            -scheme "$scheme" \
            -${{ steps.xcode_container.outputs.filetype_parameter }} "${{ steps.xcode_container.outputs.file_to_build }}" \
            -derivedDataPath build \
            | xcpretty && exit ${PIPESTATUS[0]}
      - name: Locate .app product
        id: app
        shell: bash
        run: |
          set -euo pipefail
          # Prefer products from the explicit DerivedData path
          APP_PATH=$(find "$(pwd)/build/Build/Products" -name "*.app" -type d -print -quit || true)
          # Fallback to searching repo tree if not found (e.g., structure change)
          if [ -z "${APP_PATH}" ]; then
            APP_PATH=$(find "$(pwd)" -name "*.app" -type d -print -quit || true)
          fi
          if [ -z "$APP_PATH" ]; then
            echo "No .app found" >&2
            exit 1
          fi
          echo "path=$APP_PATH" >> $GITHUB_OUTPUT
          echo "plist=$APP_PATH/Contents/Info.plist" >> $GITHUB_OUTPUT
      - name: Read app metadata (Info.plist)
        id: meta
        shell: bash
        run: |
          PLIST="${{ steps.app.outputs.plist }}"
          APP_NAME=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleName' "$PLIST")
          SHORT_VER=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' "$PLIST")
          BUILD_VER=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' "$PLIST")
          TAG="v${SHORT_VER}-${BUILD_VER}"
          echo "name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "short=$SHORT_VER" >> $GITHUB_OUTPUT
          echo "build=$BUILD_VER" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Resolved: name=$APP_NAME short=$SHORT_VER build=$BUILD_VER tag=$TAG"
      - name: Code Sign App (ad-hoc)
        shell: bash
        run: |
          set -euo pipefail
          APP_PATH="${{ steps.app.outputs.path }}"
          xattr -rc "$APP_PATH" || true
          /usr/bin/codesign --force --deep -s - "$APP_PATH"
          /usr/bin/codesign --verify --deep --verbose=2 "$APP_PATH"
      - name: Create DMG
        id: dmg
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          APP_NAME="${{ steps.meta.outputs.name }}"
          APP_PATH="${{ steps.app.outputs.path }}"
          DMG_PATH="dist/${APP_NAME}.dmg"
          hdiutil create -volname "$APP_NAME" -srcfolder "$APP_PATH" -ov -format UDZO "$DMG_PATH"
          echo "path=$(pwd)/$DMG_PATH" >> $GITHUB_OUTPUT
      - name: Compose Release Notes (no-notarize)
        shell: bash
        run: |
          APP_NAME='${{ steps.meta.outputs.name }}'
          cat > RELEASE_BODY.txt <<'EOF'
          本版本未进行 Apple 公证（Notarization）。首次打开如果看到 “来自未识别开发者/无法验证是否包含恶意软件” 提示，请按以下任一方式放行：

          方式一（推荐）：
          1) 在 Finder 中前往 /Applications
          2) 右键（或按住 Control 点击）应用图标 → 选择“打开”
          3) 在弹窗中再次点击“打开”

          方式二（命令行）：
          在终端执行（请按实际应用名替换路径）：
              xattr -dr com.apple.quarantine "/Applications/${APP_NAME}.app"

          注意：请从可信来源下载本应用。此方式不等效于 Apple 公证。
          EOF
      - name: Create Git tag from app version
        id: tag
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ steps.meta.outputs.tag }}"
          echo "Creating tag $TAG"
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag -f "$TAG"
          git push -f origin "$TAG"
      - name: Publish GitHub Release (no-notarize)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.name }} ${{ steps.meta.outputs.tag }}
          body_path: RELEASE_BODY.txt
          files: |
            ${{ steps.dmg.outputs.path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
